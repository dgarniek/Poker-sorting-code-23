import cv2
from statistics import mean
import time
    
import serial


    # captures video through webcam
cap = cv2.VideoCapture(0)
    # sets video dimensions
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)
    #sets up serial communication link
ser = serial.Serial('/dev/ttyACM0', 9600, timeout=1.0)
time.sleep(3)
ser.reset_input_buffer()

while True:
        # frame is the image
        _, frame = cap.read()
        #crops the frame
        cropped_frame = frame[50:350 ,700:1000]
       
        

        red_array = []
        blue_array = []
        #traverses through all pixels in image
        for x in range(0,299):
            for y in range(0,299):
                #filters the pixels, only black and red pixels included into array
                if cropped_frame[x,y][2] > 120 and cropped_frame[x,y][1] < 120:
                    red_array.append(cropped_frame[x,y][2])
                if cropped_frame[x,y][2] < 100 and cropped_frame[x,y][1] < 100:
                    red_array.append(cropped_frame[x,y][2])
                    
                    #adds all blue pixels to blue array
                if cropped_frame[x,y][0] > 150 and cropped_frame[x,y][1] < 100:
                    blue_array.append(cropped_frame[x,y][0])
                
                

       #takes average of the array vals
        red_avg = mean(red_array)
        blue_avg = 0
        #sometimes, there are no blue pixels and there is a statistics error, that is why there is an if statement
        if len(blue_array) > 1:
            blue_avg = mean(blue_array)
       

        color = "UNDEFINED"
        # conditional statements to decide whether pixel is black or red
        if  red_avg < 80 and blue_avg <160:
            color = "black"
        if 80 <= red_avg and blue_avg < 160:
            color = "red"
         # if the camera recognized the blue cap, it stops the program
        if blue_avg > 160: 
            break
            
         # pi communicates the card type with arduino
        if color == "red":
            ser.write("r\n".encode('utf-8'))
        if color == "black":
            ser.write("b\n".encode('utf-8'))
            

        print(red_avg)
        print(color)
        
        time.sleep(2)
        
       
    

